# Generated by Django 4.2.5 on 2023-10-31 19:32

import uuid

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.RunSQL(
            sql="""
            CREATE SCHEMA IF NOT EXISTS "content";
        """,
            reverse_sql="""
            DROP SCHEMA "content" CASCADE;
        """,
        ),
        migrations.CreateModel(
            name="FilmWork",
            fields=[
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "creation_date",
                    models.DateField(blank=True, null=True, verbose_name="creation_date"),
                ),
                (
                    "rating",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="rating",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("movie", "movie"), ("tv_show", "tv_show")],
                        verbose_name="type",
                    ),
                ),
            ],
            options={
                "verbose_name": "filmwork",
                "verbose_name_plural": "filmworks",
                "db_table": 'content"."film_work',
            },
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, unique=True, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
            ],
            options={
                "verbose_name": "genre",
                "verbose_name_plural": "genres",
                "db_table": 'content"."genre',
            },
        ),
        migrations.CreateModel(
            name="GenreFilmWork",
            fields=[
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
            options={
                "verbose_name": "genre_filmwork",
                "verbose_name_plural": "genre_filmworks",
                "db_table": 'content"."genre_film_work',
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("full_name", models.TextField(max_length=255, verbose_name="title")),
            ],
            options={
                "verbose_name": "actor",
                "verbose_name_plural": "actors",
                "db_table": 'content"."person',
            },
        ),
        migrations.CreateModel(
            name="PersonFilmWork",
            fields=[
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("role", models.TextField(verbose_name="Role")),
                (
                    "film_work",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="movies.filmwork",
                        verbose_name="filmwork",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="movies.person",
                        verbose_name="person",
                    ),
                ),
            ],
            options={
                "verbose_name": "person_filmwork",
                "verbose_name_plural": "person_filmworks",
                "db_table": 'content"."person_film_work',
            },
        ),
        migrations.AddIndex(
            model_name="person",
            index=models.Index(fields=["full_name"], name="person_full_name_idx"),
        ),
        migrations.AddField(
            model_name="genrefilmwork",
            name="film_work",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="movies.filmwork",
                verbose_name="filmwork",
            ),
        ),
        migrations.AddField(
            model_name="genrefilmwork",
            name="genre",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="movies.genre",
                verbose_name="genre",
            ),
        ),
        migrations.AddIndex(
            model_name="filmwork",
            index=models.Index(fields=["creation_date"], name="film_work_creation_date_idx"),
        ),
        migrations.AddConstraint(
            model_name="filmwork",
            constraint=models.UniqueConstraint(
                fields=("title", "creation_date"),
                name="film_work_title_creation_date_key",
            ),
        ),
        migrations.AddIndex(
            model_name="personfilmwork",
            index=models.Index(fields=["person_id"], name="person_film_work_person_id_idx"),
        ),
        migrations.AddConstraint(
            model_name="personfilmwork",
            constraint=models.UniqueConstraint(
                fields=("person_id", "film_work_id", "role"),
                name="person_film_work_person_id_film_work_id_role_key",
            ),
        ),
        migrations.AddIndex(
            model_name="genrefilmwork",
            index=models.Index(fields=["genre_id"], name="genre_film_work_genre_id_idx"),
        ),
        migrations.AddConstraint(
            model_name="genrefilmwork",
            constraint=models.UniqueConstraint(
                fields=("film_work_id", "genre_id"),
                name="genre_film_work_film_work_id_genre_id_key",
            ),
        ),
        migrations.RunSQL(
            sql="CREATE OR REPLACE FUNCTION update_modified_filmwork() RETURNS trigger AS "
                "$$ "
                "BEGIN "
                "UPDATE content.film_work fw SET modified = NOW() WHERE fw.id IN (NEW.film_work_id, OLD.film_work_id); "
                "RETURN NEW; "
                "END; "
                "$$ LANGUAGE plpgsql; ",
            reverse_sql="DROP FUNCTION IF EXISTS update_modified_filmwork();",
        ),
        migrations.RunSQL(
            sql="CREATE OR REPLACE TRIGGER updated_person_film_work "
                "BEFORE UPDATE OR INSERT OR DELETE "
                "ON person_film_work "
                "FOR EACH ROW "
                "EXECUTE FUNCTION update_modified_filmwork();",
            reverse_sql="DROP TRIGGER IF EXISTS updated_person_film_work ON person_film_work;",
        ),
        migrations.RunSQL(
            sql="CREATE OR REPLACE TRIGGER updated_genre_film_work "
                "BEFORE UPDATE OR INSERT OR DELETE "
                "ON genre_film_work "
                "FOR EACH ROW "
                "EXECUTE FUNCTION update_modified_filmwork();",
            reverse_sql="DROP TRIGGER IF EXISTS updated_genre_film_work ON genre_film_work;",
        ),
    ]
